1. Главная
  DONE * Проверить наличие нужных для поиска вузов API <-
  DONE * Добавить в Suggestions (модель) работу с University (модель)
  DONE * Добавить модель University
  DONE * Сделать индикацию загрузки
  * Выводить первые 30 вузов и строчку "и еще около 1000 вузов!".
    При нажатии на нее делать фокус на строку поиска.
  * Регистрировать поисковые запросы в GA
  * Регистрировать нажатия на "Найди свой вуз" в GA


2. Страничка ВУЗа
  * Добавить модель Faculty
  * Проверить наличие API для получения модели University и списка факультетов
    университета (без ограничений по количеству и фильтров)
  * Сделать загрузку фотографии с S3 по ID вуза. Показывать placeholder, если S3
    возвращает 404
  * Сделать вывод списка всех факультетов ВУЗа
  * Сделать вывод информации о вузе из модели University
  * Сделать индикацию загрузки инфы о вузе
  * Сделать индикацию загрузки факультетов


3. Страничка факультета
  * Стили для списка групп
  * Стили для информации о факультете
  * Стили для строки админов
  * Кнопка "Назад" над инфой о факультете
  * Привязать инфу о факультете к модели Faculty
  * Добавить коллекциб Groups, которая должна уметь брать список групп факультета вуза
  * Кэширование колекций
  * Индикация загрузки списка групп и инфы факультета
  * Вывод списка групп из коллекции Groups
  * Добавить к модели факультета список администраторов
  * Компонент для показа аватарки пользователя. Принцип как с картинкой вуза.
  * Вывод списка администраторов из модели Faculty
  * Кнопка о приглашении администратора (если текущий пользователь администратор)
  * Кнопка редактирования факультета в инфе (если текущий юзер админ)
  * Система инвайтов стать кем либо
    * На сервере метод API, который будет принимать тип инвайта (professor, admin, staff)
      и координаты при необходимости (универ и факультет для admin и staff), а отдавать
      ссылку. Должен при обращении регистрировать инвайт в базе.
      Другой метод (авторизованный), который при получении униакльного ID должен
      выполнять некоторые действия, зависящие от типа инвайта (изменить роль, добавить в список админов/старост).
      Последний метод просто отдает инфу об инвайте (модель инвайта)
    * На клиенте добавить путь /invite/<id>, который показывает лайтбокс с информацие об инвайте и
      кнопкой подтверждения или отмены. При отмене просто закрть лайтбокс, при согласии исполнять инвайт
      и перебрасывать на некоторую страничку, в зависимости от типа инвайта
  * Лайтбокс для приглашения пользователя стать админом/старостой
    * Указать EMail (просто поле для ввода email и внопка "Отпаравить приглашени", которая япоявляется,
      если в строке для ввода что-то есть). ID инвайта берется из API и передается на сервер при
      отправке инвайта.
    * Поделиться ссылкой
      Просто инпут со ссылкой, полученной с помощью API
      И кнопки с ссылками на FB и VK
  * Регистрировать в GA нажатие на отправку приглашения по email и по ссылке в соц сетях
  * Стили для странички без админов
  * Инфа о факультете должна быть на страничке без админов
  * Доделать компонент для загрузки файлов на S3. Должен уметь грузить файлы трех форматов:
    расписание, аватарка и приложения. От формата зависит фильтр типов точка для загрузки.
    Доделать API по выдаче подписи на загрузку файлов с учетом трех форматов.
  * Загрузка расписания на S3
    * Индикация загрузки
    * Сообщени об успешной загрузке и о том, что скоро расписание будет добавлено
  * После загрузки расписания слать евент на GA
  * Кнопка для приглашения админов должна работать (показывать лайтобок приглашалки)
  * API для становления админом факультета, если на факультете еще нет админов.
  * По нажатию на "Стать админом" просить авторизоваться, после чего слать запрос на
    cтановление админом и оптимистично  показывать редактор
  * Компонент для показа информационных полосок с горизонтальным переключением
    режимов (как экраны на раб столе в ios)
  * В редакторе приветственная панель с тремя режимами
    * Обычный "Привет" с поздравлением о становлении админом, какая это ответственность и честь
    * Инфа о редакторе (что нужно заполнить, для чего нужно)
    * Инфа о старостах (кто такие, что делают, как можно привлечь)
  * Стили для редактора
  * Инфа о факультете в редаторе (так же, как в списке групп)
  * Завязать редактор с моделью Faculty и сделать сохранение изменений
  * Сделать псевдо-jQuery с Gator, Traverser, Deferred и $.ajax


4. Расписание занятий группы
  * Проверить модель и API для работы со старостами (список старост в м.Group, API для
    становлением старосты, если в группе нет ни одного старосты)
  * Добавить в модель пользователя выбранную группу
  * Показывать сердечко только если группа у пользователя не выбрана или пользователь не залогинен
  * Показывать иконку редактора (в навигации и деталях о паре) только, если пользователь является
    старостой
  * Вывод списка старост с учетом компонента для вывода аватарки (вывод только если в группе
    есть хотя бы один староста)
  * Кнопка добавления заместителя открывает лайтбокс для приглашения старосты
  * Кнопка для доб замес доступна только старостам группы
  * Показывать печальную ифно панельку, если в группе нет старосты
  * Показыавть инфо панельку после становления юзера старостой
    * Первая страничка о том, какая честь быть старостой на ST, какая это ответственность
    * Вторая страничка о том, что теперь можно делать (заполнять расписание, оповещать
      об изменениях, редактировать файлы у предметов)
    * Третья – о приглашении одногруппников чз соцсети (ссылки на публакацию в тв, вк, фб)
  * Показывать пустое расписание
  * Завязать редактор расписания с API
  * Сделать API для отправки оповещений по SMS всем участникам группы
  * Убрать режим "сессия" (временно)
  * Стили для деталий о паре
  * Доверстать приложения
  * Стили для приложений
  * Доделат загрузку файлов
  * Каждый Item должен иметь два режима: редактор и отобр
  * Привязать вывод приложений к коллекции Attachments. Вывод тольео N приложений
  * Сделать кнопку "загрузить еще" для показа большего кол-ва приложений



5. Вход/Регистрация/Аккаунт
  * После первого входа (регистрации), показывать lightbox с редактором инфы о пользовател
  * Редактор инфы о пользователе
    * Первая вкладка - ФИО, телефон и email (инфа о получении изменений по SMS)
      * При закрытии вкладки и отсутствующем номере телефона предупреждать,
        что оповещения об изменениях не будут приходить.
    * Вторая вкладка - настройки (пока пусто)
    * Третья - выход
  * Заменять вход на аватарку после авторизации
  * Менюшка с выходом и настройками и профилем при наведении на аватарку







